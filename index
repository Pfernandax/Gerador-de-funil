<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <title>Gerador de Pipeline de Vendas</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@500;700&display=swap" rel="stylesheet">
  <style>
    body {
      background: linear-gradient(135deg,#f2f7fd 0%, #d9e6fb 100%);
      font-family: 'Montserrat', Arial, sans-serif;
      min-height: 100vh; margin: 0; padding: 0;
    }
    .main-title {
      text-align: center; font-size: 2.1rem; font-weight: 800; color: #38548b; margin-top: 38px; letter-spacing: -1px; margin-bottom: 0px; text-shadow: 0 3px 15px #d3e5fd;
    }
    .center-outer {
      min-height: 75vh;
      display: flex; align-items: center; justify-content: center;
    }
    .form-card-anim-wrapper {
      width: 430px; min-width: 280px; max-width: 98vw;
      overflow: visible;
      position: relative;
      margin-top: 0;
      min-height: 320px;
    }
    .form-card {
      background: #fff;
      width: 100%;
      padding: 42px 34px 38px 34px;
      border-radius: 30px;
      box-shadow: 0 8px 36px #7796cc15, 0 1.5px 4px #b6d0f89e;
      transition: box-shadow .18s;
      position: absolute;
      left: 0; top: 0;
      animation: fadeIn .45s;
      min-width: 280px;
    }
    .form-card.slide-in-left { animation: slideInLeft .45s cubic-bezier(.75,0,.27,1);} 
    .form-card.slide-in-right { animation: slideInRight .45s cubic-bezier(.75,0,.27,1);} 
    .form-card.slide-out-left { animation: slideOutLeft .42s cubic-bezier(.85,0,.14,1);} 
    .form-card.slide-out-right { animation: slideOutRight .42s cubic-bezier(.85,0,.14,1);} 
    @keyframes slideInLeft {
      from { opacity: 0; transform: translateX(-120px);} 
      to   { opacity: 1; transform: none;} 
    }
    @keyframes slideInRight {
      from { opacity: 0; transform: translateX(120px);} 
      to   { opacity: 1; transform: none;} 
    }
    @keyframes slideOutLeft {
      from { opacity: 1; transform: none;} 
      to   { opacity: 0; transform: translateX(-120px);} 
    }
    @keyframes slideOutRight {
      from { opacity: 1; transform: none;} 
      to   { opacity: 0; transform: translateX(120px);} 
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px);} 
      to { opacity: 1; transform: none;} 
    }
    .progress-bar { position: absolute; top: 0; left: 0; width: 100%; height: 5px; border-radius: 4px 4px 0 0; background: #e6f1fd; overflow: hidden; }
    .progress-bar-inner { background: linear-gradient(90deg,#42a6ff 10%, #77e3b0 100%); height: 100%; width: 0%; transition: width .45s cubic-bezier(.65,0,.35,1); }
    .step-emoji { font-size: 30px; margin-bottom: 12px; display: block; animation: bounce .6s; }
    @keyframes bounce { 0% { transform: scale(0.7);} 70% { transform: scale(1.15);} 100% { transform: scale(1);} }
    .step-title { font-size: 21px; font-weight: 700; color: #284d85; margin-bottom: 18px; letter-spacing: -1px; }
    .options label { display: flex; align-items: center; font-size: 17px; padding: 13px 12px; border-radius: 16px; border: 1.5px solid #e3eefa; margin-bottom: 16px; cursor: pointer; background: #f6fbff; transition: border .23s, background .18s; }
    .options input[type="radio"]:checked + span,
    .options label:has(input[type="radio"]:checked) { background: #e3f4ff; border: 1.5px solid #6bd1c5; color: #249e90; font-weight: 700; }
    .options input[type="radio"] { accent-color: #4ab9ce; margin-right: 16px; width: 22px; height: 22px; }
    .options select, .options input[type="text"] { font-size: 16px; padding: 11px 12px; border-radius: 12px; border: 1.5px solid #c5d5ee; width: 100%; background: #f6fbff; margin-bottom: 8px; margin-top: 7px; }
    .step-tip { font-size: 14px; color: #4ab9ce; margin-bottom: 18px; background: #e7f5fd; border-radius: 10px; padding: 8px 12px; font-weight: 500; }
    .form-btn-row { display: flex; justify-content: flex-end; gap: 14px; margin-top: 25px; }
    .next-btn, .prev-btn { font-family: inherit; font-size: 16px; font-weight: 600; border: none; border-radius: 16px; padding: 11px 34px; transition: all .21s; box-shadow: 0 1px 3px #99c7ff18; margin: 0; cursor: pointer; }
    .next-btn { background: linear-gradient(90deg,#4fbeff 30%,#6be3c0 100%); color: #fff; box-shadow: 0 5px 15px #85e4ff1c; }
    .next-btn[disabled] { background: #e2eefd; color: #a6b8ca; cursor: not-allowed; }
    .next-btn:not([disabled]):hover { box-shadow: 0 2px 16px #a5e9ff55; transform: scale(1.04);} 
    .prev-btn { background: #f6fbff; color: #4389c7;} 
    .prev-btn:hover { background: #e6f1fd;} 
    /* Pipeline Kanban */
    .pipeline-wrapper { width: 98vw; max-width: 1160px; margin: 30px auto 0 auto; display: flex; flex-direction: column; align-items: center; }
    .pipeline-board { width: 100%; display: flex; gap: 18px; justify-content: center; margin-bottom: 24px; flex-wrap: wrap; }
    .pipeline-col { border-radius: 20px 20px 16px 16px; min-width: 180px; max-width: 240px; flex: 1 1 200px; box-shadow: 0 2px 13px #aecbed14; padding: 0 0 18px 0; display: flex; flex-direction: column; align-items: center; border-top: 7px solid #4fbeff; position: relative; background: #f5faff; margin-bottom: 8px; }
    .col-ia { background: #eafff7 !important; border-top: 7px solid #32c4b0 !important;}
    .col-humano { background: #f5faff !important; border-top: 7px solid #7085f5 !important;}
    .pipeline-col .col-title { font-size: 1.09rem; font-weight: bold; color: #234366; margin: 0; padding: 19px 12px 13px 12px; text-align: center; min-height: 54px; display: flex; align-items: center; justify-content: center; gap: 9px; }
    .col-ia .col-title { color: #128b6d;}
    .col-humano .col-title { color: #3459aa;}
    .kanban-cards { width: 93%; min-height: 32px;}
    .kanban-card { background: #fff; border-radius: 12px; margin: 7px 0 7px 0; padding: 14px 14px 12px 16px; font-size: 15px; color: #0b2b45; font-weight: 600; box-shadow: 0 2px 8px #b7e6ff16; position: relative; display: flex; flex-direction: column; animation: fadeIn .32s; }
    .kanban-card.ia .card-label { color: #43bbaa; font-size: 12px; font-weight: bold;}
    .kanban-card.humano .card-label { color: #7b86e2; font-size: 12px; font-weight: bold;}
    .kanban-card.usernote .card-label { color: #bf950f; font-size: 12px;}
    .kanban-card .card-delete, .del-note-btn { position: absolute; top: 5px; right: 10px; background: none; border: none; color: #b8b8b8; font-size: 19px; cursor: pointer; line-height: 1; opacity: 0.45; transition: opacity .15s; }
    .kanban-card .card-delete:hover, .del-note-btn:hover { opacity: 0.9;}
    .kanban-add-btn, .add-note-btn { margin-top: 12px; width: 100%; min-height: 48px; border: 2px dashed #cbe0f7; border-radius: 13px; background: #f8fcff; color: #5aa4de; font-size: 2rem; display: flex; align-items: center; justify-content: center; cursor: pointer; transition: border .19s, color .18s; }
    .kanban-add-btn:hover, .add-note-btn:hover { border-color: #4fbeff; color: #1a8dcb;}
    .pipeline-actions { width: 100%; text-align: right; margin-top: 15px; display: flex; gap: 12px; justify-content: flex-end; }
    .pdf-btn, .restart-btn { background: linear-gradient(90deg,#4fbeff 40%,#6be3c0 100%); color: #fff; border: none; border-radius: 14px; padding: 11px 22px; font-size: 1.09rem; font-family: inherit; font-weight: 700; cursor: pointer; transition: filter .19s; box-shadow: 0 2px 12px #b6eaff29; }
    .restart-btn { background: #eaf7fa; color: #227f93; border: 1.2px solid #b3e5fc;}
    .pdf-btn:hover, .restart-btn:hover { filter: brightness(1.09);} 
    .pipeline-objetivo { margin-bottom: 15px; color: #204663; font-size: 1.11rem;}
    .add-note-form { margin: 8px 0 0 0; width: 94%; }
    .add-note-form textarea { width: 100%; border-radius: 8px; border: 1px solid #b1d7d2; font-size: 14px; padding: 6px 8px;}
    .add-note-form button { margin-top: 6px; padding: 4px 18px; border: none; border-radius: 8px; background: #43bbaa; color: #fff; font-weight: bold; cursor: pointer;}
    @media (max-width: 800px) { .pipeline-board { flex-direction: column; gap: 13px;} .pipeline-col { max-width: 98vw;} }
    @media (max-width: 600px) { .form-card-anim-wrapper { width: 99vw; } .form-card { padding: 20px 7px 16px 7px; min-width: unset;} .step-title { font-size: 17px;} .options label { font-size: 15px; } }
  </style>
</head>
<body>
<div class="main-title">Gerador de Pipeline de Vendas</div>
<div class="center-outer" id="centerForm">
  <div class="form-card-anim-wrapper" id="wizardWrapper"></div>
</div>
<div id="pipelineArea" style="display:none;"></div>

<script>
  let userAnswers = {};

  // Segmentos
  const segmentos = [
    {val:"mediaGeral",txt:"M√©dia Geral"},
    {val:"agencia",txt:"Ag√™ncia de Marketing/Publicidade"},
    {val:"consultorias",txt:"Consultorias/Treinamentos"},
    {val:"ecommerce",txt:"E-commerce"},
    {val:"educacao",txt:"Educa√ß√£o/Ensino"},
    {val:"engenharia",txt:"Engenharia/Ind√∫stria"},
    {val:"eventos",txt:"Eventos"},
    {val:"financeiro",txt:"Financeiro/Jur√≠dico/Servi√ßos"},
    {val:"hardware",txt:"Hardware/Eletr√¥nicos"},
    {val:"imobiliarias",txt:"Imobili√°rias"},
    {val:"midia",txt:"M√≠dia/Comunica√ß√£o"},
    {val:"ong",txt:"ONG"},
    {val:"saude",txt:"Sa√∫de/Est√©tica"},
    {val:"servicos",txt:"Servi√ßos em Geral"},
    {val:"rh",txt:"RH/Coaching"},
    {val:"software",txt:"Software/Cloud"},
    {val:"telecom",txt:"Telecom"},
    {val:"turismo",txt:"Turismo/Lazer"},
    {val:"varejo",txt:"Varejo"}
  ];

  // Emojis
  const icons = { ia: "ü§ñ", humano: "üôã‚Äç‚ôÇÔ∏è" };

  // ======== OVERRIDES existentes (opcionais) ========
  // Mant√©m suas varia√ß√µes, mas agora ser√£o "preenchidas" para ficarem completas
  const pipelinesIAOverrides = {
    mediaGeral: [
      { nome: "Lead Novo", tipo: "ia", cards: ["Mensagem 1D: ‚ÄòRecebemos seu contato, obrigado!‚Äô","Mensagem 3D: ‚ÄòPodemos ajudar em algo?‚Äô","Transferir para humano se respondeu"]},
      { nome: "N√£o Respondeu", tipo: "ia", cards: ["Mensagem 7D: ‚ÄòEst√° tudo bem? Seguimos √† disposi√ß√£o.‚Äô"]},
      { nome: "Em Atendimento", tipo: "humano", cards: ["Contato do consultor","Diagn√≥stico da necessidade"]},
      { nome: "Negocia√ß√£o/Fechamento", tipo: "humano", cards: ["Proposta enviada","Negocia√ß√£o","Fechamento"]}
    ],
    agencia: [
      { nome: "Lead Novo", tipo: "ia", cards: ["Mensagem 1D: ‚ÄòOi, tudo bem? Vi seu interesse em marketing‚Ä¶‚Äô","Mensagem 3D: ‚ÄòPodemos marcar uma conversa?‚Äô","Mensagem 7D: ‚ÄòSe quiser, posso enviar cases de sucesso.‚Äô","Transferir para consultor se respondeu"]},
      { nome: "N√£o Respondeu", tipo: "ia", cards: ["Mensagem 14D: ‚ÄòAinda tem interesse em campanhas?‚Äô","Mensagem 28D: ‚ÄòTemos novidades, posso te atualizar?‚Äô","Mensagem 45D: ‚Äò√öltima chamada, ainda te interessa?‚Äô"]},
      { nome: "Em Atendimento", tipo: "humano", cards: ["Consultor liga e agenda briefing","Envia material de portf√≥lio"]},
      { nome: "Negocia√ß√£o", tipo: "humano", cards: ["Proposta personalizada","Negocia√ß√£o com follow-up ativo"]}
    ],
    consultorias: [
      { nome: "Lead Novo", tipo: "ia", cards: ["Mensagem 1D: ‚ÄòObrigado pelo interesse, qual seu desafio?‚Äô","Mensagem 4D: ‚ÄòPrefere online ou presencial?‚Äô","Transferir para especialista se respondeu"]},
      { nome: "Falta de retorno", tipo: "ia", cards: ["Mensagem 7D: ‚ÄòGostaria de agendar um diagn√≥stico?‚Äô","Mensagem 14D: ‚ÄòNossa agenda est√° aberta, posso reservar para voc√™?‚Äô"]},
      { nome: "Pr√©-Diagn√≥stico", tipo: "humano", cards: ["Consultor faz liga√ß√£o","Pr√©-diagn√≥stico gratuito"]},
      { nome: "Proposta/Fechamento", tipo: "humano", cards: ["Apresenta√ß√£o de proposta","Follow-up at√© fechar"]}
    ],
    ecommerce: [
      { nome: "Carrinho Abandonado", tipo: "ia", cards: ["Mensagem 1H: ‚ÄòSeu carrinho est√° esperando!‚Äô","Mensagem 1D: ‚ÄòPrecisa de ajuda para finalizar?‚Äô","Transferir para humano se respondeu"]},
      { nome: "N√£o respondeu", tipo: "ia", cards: ["Mensagem 3D: ‚ÄòAinda est√° interessado? Produto limitado!‚Äô"]},
      { nome: "Em Atendimento", tipo: "humano", cards: ["Atendente tira d√∫vidas","Oferece cupom especial"]},
      { nome: "P√≥s-venda", tipo: "humano", cards: ["Confirma√ß√£o do pedido","Pesquisa de satisfa√ß√£o"]}
    ]
  };

  const pipelinesTradOverrides = {
    mediaGeral: [
      { nome: "Prospec√ß√£o", tipo: "humano", cards: []},
      { nome: "Qualifica√ß√£o", tipo: "humano", cards: []},
      { nome: "Apresenta√ß√£o", tipo: "humano", cards: []},
      { nome: "Proposta", tipo: "humano", cards: []},
      { nome: "Negocia√ß√£o", tipo: "humano", cards: []},
      { nome: "Fechamento", tipo: "humano", cards: []}
    ],
    agencia: [
      { nome: "Prospec√ß√£o de Leads", tipo: "humano", cards: []},
      { nome: "Briefing Inicial", tipo: "humano", cards: []},
      { nome: "Diagn√≥stico e Planejamento", tipo: "humano", cards: []},
      { nome: "Apresenta√ß√£o de Proposta", tipo: "humano", cards: []},
      { nome: "Negocia√ß√£o/Alinhamento", tipo: "humano", cards: []},
      { nome: "Aprova√ß√£o do Cliente", tipo: "humano", cards: []},
      { nome: "Fechamento", tipo: "humano", cards: []}
    ],
    consultorias: [
      { nome: "Gera√ß√£o de Lead", tipo: "humano", cards: []},
      { nome: "Diagn√≥stico Inicial", tipo: "humano", cards: []},
      { nome: "Reuni√£o de Levantamento", tipo: "humano", cards: []},
      { nome: "Proposta de Solu√ß√£o", tipo: "humano", cards: []},
      { nome: "Ajustes/Necessidades", tipo: "humano", cards: []},
      { nome: "Fechamento do Contrato", tipo: "humano", cards: []}
    ],
    ecommerce: [
      { nome: "Capta√ß√£o de Lead/Visitante", tipo: "humano", cards: []},
      { nome: "Engajamento (Ofertas/Newsletter)", tipo: "humano", cards: []},
      { nome: "Adi√ß√£o ao Carrinho", tipo: "humano", cards: []},
      { nome: "Recupera√ß√£o de Carrinho", tipo: "humano", cards: []},
      { nome: "Pagamento Realizado", tipo: "humano", cards: []},
      { nome: "P√≥s-venda/Fideliza√ß√£o", tipo: "humano", cards: []}
    ]
  };

  // ======== Builder completo de pipelines ========
  const iconsMap = { ia: "IA", humano: "Humano" };

  function slug(s){
    return (s||"").toLowerCase()
      .normalize('NFD').replace(/[\u0300-\u036f]/g,'')
      .replace(/[^a-z0-9\s-]/g,'')
      .replace(/\s+/g,'-');
  }

  function baseTemplateDefault(usarIA){
    const ia = usarIA ? 'ia' : 'humano';
    return [
      { nome: usarIA?"Lead novo (captura autom√°tica)":"Lead novo", tipo: usarIA?"ia":"humano", cards: usarIA?["Mensagem 1D de boas-vindas","Mensagem 3D de apoio","Transferir se respondeu"]:["Registrar lead","Dar boas-vindas"] },
      { nome: usarIA?"Qualifica√ß√£o (IA ‚Üí Humano)":"Qualifica√ß√£o", tipo: ia, cards: usarIA?["Perguntas de qualifica√ß√£o","Marcar contato humano se apto"]:["BANT/GPCT","Priorizar"] },
      { nome: "Descoberta/Diagn√≥stico", tipo: "humano", cards: ["Entender dor/necessidade","Mapear decisores"] },
      { nome: "Apresenta√ß√£o/Demo", tipo: "humano", cards: ["Apresentar solu√ß√£o","Validar encaixe"] },
      { nome: "Proposta", tipo: "humano", cards: ["Enviar proposta","Prazo e condi√ß√µes"] },
      { nome: usarIA?"Follow-up Autom√°tico":"Follow-up", tipo: usarIA?"ia":"humano", cards: usarIA?["Lembretes 2D/5D","Reengajamento"]:["Follow-ups peri√≥dicos"] },
      { nome: "Negocia√ß√£o", tipo: "humano", cards: ["Ajustes comerciais","Aprova√ß√£o interna"] },
      { nome: "Fechado ‚Äì Ganho", tipo: "humano", cards: ["Contrato assinado"] },
      { nome: "Fechado ‚Äì Perdido", tipo: "humano", cards: ["Registrar motivo"] },
      { nome: "Onboarding/P√≥s-venda", tipo: "humano", cards: ["Kickoff","NPS inicial"] }
    ];
  }

  function baseTemplateBySegment(segmento, usarIA){
    const ia = usarIA ? 'ia' : 'humano';
    switch(segmento){
      case 'ecommerce':
        return [
          { nome: usarIA?"Lead/Visitante (captura)":"Lead/Visitante", tipo: usarIA?"ia":"humano", cards: usarIA?["Mensagem de boas-vindas","Pergunta de interesse"]:["Capturar email/whats"] },
          { nome: "Engajamento", tipo: ia, cards: ["Ofertas/Newsletter","D√∫vidas r√°pidas"] },
          { nome: "Adi√ß√£o ao Carrinho", tipo: "humano", cards: ["Suporte √† compra"] },
          { nome: usarIA?"Carrinho Abandonado (IA)":"Recupera√ß√£o de Carrinho", tipo: usarIA?"ia":"humano", cards: usarIA?["Lembrete 1H","Cupom 24H"]:["Contato manual"] },
          { nome: "Checkout/Pagamento", tipo: "humano", cards: ["Confirma√ß√£o de pagamento"] },
          { nome: "Fechado ‚Äì Ganho", tipo: "humano", cards: ["Pedido aprovado"] },
          { nome: "Fechado ‚Äì Perdido", tipo: "humano", cards: ["Motivo de desist√™ncia"] },
          { nome: "P√≥s-venda/Fideliza√ß√£o", tipo: "humano", cards: ["Pesquisa de satisfa√ß√£o","Programa de pontos"] }
        ];
      case 'educacao':
        return [
          { nome: usarIA?"Lead novo (IA)":"Lead novo", tipo: usarIA?"ia":"humano", cards: usarIA?["Perguntar curso de interesse","Agendar contato"]:["Registrar interesse"] },
          { nome: usarIA?"Pr√©-qualifica√ß√£o (IA ‚Üí Humano)":"Pr√©-qualifica√ß√£o", tipo: usarIA?"ia":"humano", cards: ["Perfil do aluno","Disponibilidade"] },
          { nome: "Aula/Prova Diagn√≥stica", tipo: "humano", cards: ["Agendar e realizar"] },
          { nome: "Proposta/Mensalidades", tipo: "humano", cards: ["Apresentar planos","Bolsas/Descontos"] },
          { nome: usarIA?"Follow-up Autom√°tico":"Follow-up", tipo: usarIA?"ia":"humano", cards: ["Lembretes de matr√≠cula"] },
          { nome: "Matr√≠cula", tipo: "humano", cards: ["Documentos","Contrato"] },
          { nome: "Fechado ‚Äì Perdido", tipo: "humano", cards: ["Sem interesse no momento"] },
          { nome: "P√≥s-matr√≠cula", tipo: "humano", cards: ["Boas-vindas","Acompanhamento inicial"] }
        ];
      case 'imobiliarias':
        return [
          { nome: usarIA?"Lead novo (IA)":"Lead novo", tipo: usarIA?"ia":"humano", cards: usarIA?["Tipo de im√≥vel","Faixa de pre√ßo"]:["Registrar requisitos"] },
          { nome: "Qualifica√ß√£o", tipo: usarIA?"ia":"humano", cards: ["Urg√™ncia","Financiamento?"] },
          { nome: "Visita Agendada", tipo: "humano", cards: ["Confirmar dia/hor√°rio"] },
          { nome: "Proposta/Intent", tipo: "humano", cards: ["Enviar proposta","Sinal"] },
          { nome: "Negocia√ß√£o", tipo: "humano", cards: ["Condi√ß√µes/financiamento"] },
          { nome: "Fechado ‚Äì Ganho", tipo: "humano", cards: ["Contrato de compra/loca√ß√£o"] },
          { nome: "Fechado ‚Äì Perdido", tipo: "humano", cards: ["Motivo: pre√ßo/local" ] },
          { nome: "P√≥s-venda", tipo: "humano", cards: ["Entrega de chaves","Checklist"] }
        ];
      case 'saude':
        return [
          { nome: usarIA?"Lead novo (IA)":"Lead novo", tipo: usarIA?"ia":"humano", cards: usarIA?["Especialidade de interesse","Sintoma principal"]:["Registrar contato"] },
          { nome: "Triagem", tipo: usarIA?"ia":"humano", cards: ["Elegibilidade","Urg√™ncia"] },
          { nome: "Avalia√ß√£o/Consulta", tipo: "humano", cards: ["Agendar e realizar"] },
          { nome: "Proposta de Tratamento", tipo: "humano", cards: ["Plano e or√ßamento"] },
          { nome: usarIA?"Follow-up Autom√°tico":"Follow-up", tipo: usarIA?"ia":"humano", cards: ["Ader√™ncia/retorno"] },
          { nome: "Agendamento/Procedimento", tipo: "humano", cards: ["Data e preparo"] },
          { nome: "Fechado ‚Äì Ganho", tipo: "humano", cards: ["Tratamento realizado"] },
          { nome: "Fechado ‚Äì Perdido", tipo: "humano", cards: ["N√£o compareceu/adiou"] },
          { nome: "P√≥s-procedimento", tipo: "humano", cards: ["Cuidados e NPS"] }
        ];
      case 'software':
        return [
          { nome: usarIA?"Lead novo (IA)":"Lead novo", tipo: usarIA?"ia":"humano", cards: usarIA?["Segmento","Tamanho do time"]:["Origem e interesse"] },
          { nome: "Qualifica√ß√£o", tipo: usarIA?"ia":"humano", cards: ["Fit t√©cnico","Fit financeiro"] },
          { nome: "Demo", tipo: "humano", cards: ["Demonstra√ß√£o personalizada"] },
          { nome: "Trial/Pilot", tipo: "humano", cards: ["Ativar conta","Definir sucesso"] },
          { nome: "Proposta", tipo: "humano", cards: ["Planos e SLAs"] },
          { nome: usarIA?"Follow-up Autom√°tico":"Follow-up", tipo: usarIA?"ia":"humano", cards: ["Engajamento no trial"] },
          { nome: "Negocia√ß√£o", tipo: "humano", cards: ["Termos e descontos"] },
          { nome: "Fechado ‚Äì Ganho", tipo: "humano", cards: ["Pedido/PO"] },
          { nome: "Fechado ‚Äì Perdido", tipo: "humano", cards: ["Competidor/sem budget"] },
          { nome: "Onboarding", tipo: "humano", cards: ["Kickoff e implementa√ß√£o"] }
        ];
      case 'turismo':
        return [
          { nome: usarIA?"Lead novo (IA)":"Lead novo", tipo: usarIA?"ia":"humano", cards: usarIA?["Destino/Per√≠odo","Or√ßamento"]:["Coletar prefer√™ncias"] },
          { nome: "Roteiro/Or√ßamento", tipo: "humano", cards: ["Montar proposta"] },
          { nome: usarIA?"Follow-up Autom√°tico":"Follow-up", tipo: usarIA?"ia":"humano", cards: ["Lembretes de reserva"] },
          { nome: "Reserva", tipo: "humano", cards: ["Bloqueio e confirma√ß√£o"] },
          { nome: "Pagamento", tipo: "humano", cards: ["Emiss√£o"] },
          { nome: "Fechado ‚Äì Ganho", tipo: "humano", cards: ["Viagem confirmada"] },
          { nome: "Fechado ‚Äì Perdido", tipo: "humano", cards: ["N√£o viaja/adiou"] },
          { nome: "P√≥s-viagem", tipo: "humano", cards: ["Pesquisa e upsell"] }
        ];
      case 'engenharia':
        return [
          { nome: usarIA?"Lead novo (IA)":"Lead novo", tipo: usarIA?"ia":"humano", cards: usarIA?["Segmento industrial","CapEx/OpEx"]:["Registrar oportunidade"] },
          { nome: "Especifica√ß√£o T√©cnica", tipo: "humano", cards: ["Requisitos e escopo"] },
          { nome: "Visita T√©cnica", tipo: "humano", cards: ["Agenda de visita"] },
          { nome: "Proposta T√©cnica/Comercial", tipo: "humano", cards: ["Enviar proposta"] },
          { nome: usarIA?"Follow-up Autom√°tico":"Follow-up", tipo: usarIA?"ia":"humano", cards: ["Refor√ßar valor"] },
          { nome: "Negocia√ß√£o", tipo: "humano", cards: ["Condi√ß√µes e prazos"] },
          { nome: "Fechado ‚Äì Ganho", tipo: "humano", cards: ["Projeto aprovado"] },
          { nome: "Fechado ‚Äì Perdido", tipo: "humano", cards: ["Sem budget/escopo"] },
          { nome: "P√≥s-venda/Execu√ß√£o", tipo: "humano", cards: ["Kickoff do projeto"] }
        ];
      case 'eventos':
        return [
          { nome: usarIA?"Lead novo (IA)":"Lead novo", tipo: usarIA?"ia":"humano", cards: usarIA?["Tipo de evento","Data e p√∫blico"]:["Registrar briefing"] },
          { nome: "Briefing/Descoberta", tipo: "humano", cards: ["Requisitos e metas"] },
          { nome: "Proposta", tipo: "humano", cards: ["Apresentar or√ßamento"] },
          { nome: usarIA?"Follow-up Autom√°tico":"Follow-up", tipo: usarIA?"ia":"humano", cards: ["Acompanhar decis√£o"] },
          { nome: "Negocia√ß√£o/Contrato", tipo: "humano", cards: ["Ajustes finais"] },
          { nome: "Fechado ‚Äì Ganho", tipo: "humano", cards: ["Contrato assinado"] },
          { nome: "Fechado ‚Äì Perdido", tipo: "humano", cards: ["Concorrente escolhido"] },
          { nome: "Execu√ß√£o/P√≥s", tipo: "humano", cards: ["Planejamento e debrief"] }
        ];
      case 'financeiro':
        return [
          { nome: usarIA?"Lead novo (IA)":"Lead novo", tipo: usarIA?"ia":"humano", cards: usarIA?["√Årea (cont√°bil/jur√≠dico)","Ticket"]:["Registrar demanda"] },
          { nome: "Triagem do Caso", tipo: usarIA?"ia":"humano", cards: ["Elegibilidade","Risco"] },
          { nome: "Avalia√ß√£o/Reuni√£o", tipo: "humano", cards: ["Entendimento detalhado"] },
          { nome: "Proposta", tipo: "humano", cards: ["Honor√°rios/condi√ß√µes"] },
          { nome: usarIA?"Follow-up Autom√°tico":"Follow-up", tipo: usarIA?"ia":"humano", cards: ["Lembretes de decis√£o"] },
          { nome: "Negocia√ß√£o", tipo: "humano", cards: ["Parcelas/escopo"] },
          { nome: "Fechado ‚Äì Ganho", tipo: "humano", cards: ["Contrato"] },
          { nome: "Fechado ‚Äì Perdido", tipo: "humano", cards: ["Sem avan√ßo"] },
          { nome: "Onboarding", tipo: "humano", cards: ["Documentos iniciais"] }
        ];
      case 'hardware':
        return [
          { nome: usarIA?"Lead novo (IA)":"Lead novo", tipo: usarIA?"ia":"humano", cards: usarIA?["Tipo de equipamento","Prazo"]:["Registrar interesse"] },
          { nome: "Qualifica√ß√£o T√©cnica", tipo: usarIA?"ia":"humano", cards: ["Compatibilidade","Volumes"] },
          { nome: "Cota√ß√£o", tipo: "humano", cards: ["Enviar pre√ßos"] },
          { nome: "Proposta", tipo: "humano", cards: ["Condi√ß√µes comerciais"] },
          { nome: usarIA?"Follow-up Autom√°tico":"Follow-up", tipo: usarIA?"ia":"humano", cards: ["Refor√ßar valor"] },
          { nome: "Negocia√ß√£o", tipo: "humano", cards: ["Prazos/log√≠stica"] },
          { nome: "Fechado ‚Äì Ganho", tipo: "humano", cards: ["Pedido confirmado"] },
          { nome: "Fechado ‚Äì Perdido", tipo: "humano", cards: ["Sem decis√£o"] },
          { nome: "Entrega/Instala√ß√£o", tipo: "humano", cards: ["Agendar instala√ß√£o"] }
        ];
      case 'midia':
        return [
          { nome: usarIA?"Lead novo (IA)":"Lead novo", tipo: usarIA?"ia":"humano", cards: usarIA?["Canal de interesse","Objetivo"]:["Registrar briefing"] },
          { nome: "Briefing/Planejamento", tipo: "humano", cards: ["Plano de m√≠dia"] },
          { nome: "Proposta", tipo: "humano", cards: ["Budget e canais"] },
          { nome: usarIA?"Follow-up Autom√°tico":"Follow-up", tipo: usarIA?"ia":"humano", cards: ["Acompanhar aprova√ß√£o"] },
          { nome: "Negocia√ß√£o/Aprova√ß√£o", tipo: "humano", cards: ["Ajustes e OK"] },
          { nome: "Fechado ‚Äì Ganho", tipo: "humano", cards: ["Contrato/PI"] },
          { nome: "Fechado ‚Äì Perdido", tipo: "humano", cards: ["Reprovado"] },
          { nome: "Execu√ß√£o/P√≥s", tipo: "humano", cards: ["Relat√≥rios e NPS"] }
        ];
      case 'ong':
        return [
          { nome: usarIA?"Interessado (IA)":"Interessado", tipo: usarIA?"ia":"humano", cards: usarIA?["Causa de interesse","Valor sugerido"]:["Registrar contato"] },
          { nome: "Apresenta√ß√£o da Causa", tipo: "humano", cards: ["Materiais e impacto"] },
          { nome: usarIA?"Follow-up Autom√°tico":"Follow-up", tipo: usarIA?"ia":"humano", cards: ["Lembretes de doa√ß√£o"] },
          { nome: "Doa√ß√£o/Ades√£o", tipo: "humano", cards: ["Confirmar recorr√™ncia"] },
          { nome: "Fechado ‚Äì Ganho", tipo: "humano", cards: ["Doador ativo"] },
          { nome: "Fechado ‚Äì Perdido", tipo: "humano", cards: ["N√£o aderiu"] },
          { nome: "Relacionamento", tipo: "humano", cards: ["Presta√ß√£o de contas"] }
        ];
      case 'rh':
        return [
          { nome: usarIA?"Lead/Empresa (IA)":"Lead/Empresa", tipo: usarIA?"ia":"humano", cards: usarIA?["Vagas/Objetivo","Prazo"]:["Coletar requisitos"] },
          { nome: "Alinhamento", tipo: usarIA?"ia":"humano", cards: ["Perfil e SLAs"] },
          { nome: "Apresenta√ß√£o de Solu√ß√£o", tipo: "humano", cards: ["Metodologia e proposta"] },
          { nome: usarIA?"Follow-up Autom√°tico":"Follow-up", tipo: usarIA?"ia":"humano", cards: ["Acompanhar decis√£o"] },
          { nome: "Negocia√ß√£o", tipo: "humano", cards: ["Condi√ß√µes"] },
          { nome: "Fechado ‚Äì Ganho", tipo: "humano", cards: ["Contrato"] },
          { nome: "Fechado ‚Äì Perdido", tipo: "humano", cards: ["Sem avan√ßo"] },
          { nome: "Entrega/Execu√ß√£o", tipo: "humano", cards: ["In√≠cio do projeto"] }
        ];
      case 'telecom':
        return [
          { nome: usarIA?"Lead novo (IA)":"Lead novo", tipo: usarIA?"ia":"humano", cards: usarIA?["Localidade","Consumo"]:["Registrar dados"] },
          { nome: "Qualifica√ß√£o de Plano", tipo: usarIA?"ia":"humano", cards: ["Elegibilidade"] },
          { nome: "Proposta Comercial", tipo: "humano", cards: ["Planos e combos"] },
          { nome: usarIA?"Follow-up Autom√°tico":"Follow-up", tipo: usarIA?"ia":"humano", cards: ["Lembrete de ades√£o"] },
          { nome: "Negocia√ß√£o", tipo: "humano", cards: ["Condi√ß√µes"] },
          { nome: "Fechado ‚Äì Ganho", tipo: "humano", cards: ["Ativa√ß√£o"] },
          { nome: "Fechado ‚Äì Perdido", tipo: "humano", cards: ["Sem resposta"] },
          { nome: "P√≥s-venda/Atendimento", tipo: "humano", cards: ["Boas-vindas"] }
        ];
      case 'turismo': // j√° tratado acima
      case 'servicos':
      case 'varejo':
      case 'agencia':
      case 'consultorias':
      case 'mediaGeral':
      default:
        return baseTemplateDefault(usarIA);
    }
  }

  function mergeAndComplete(base, override){
    if(!override || !Array.isArray(override)) return base;
    const result = [...override.map(o=>({ ...o }))];
    const namesInOverride = new Set(result.map(s=>slug(s.nome)));
    base.forEach(b=>{ if(!namesInOverride.has(slug(b.nome))) result.push({ ...b }); });

    // Garantir colunas essenciais (se ainda faltarem)
    const mustHave = ["Fechado ‚Äì Ganho","Fechado ‚Äì Perdido","Onboarding/P√≥s-venda","P√≥s-venda","Onboarding","P√≥s-viagem","P√≥s-procedimento","P√≥s-matr√≠cula"]; // ao menos uma de p√≥s
    const haveSlugs = new Set(result.map(s=>slug(s.nome)));
    if(!haveSlugs.has(slug("Fechado ‚Äì Ganho"))) result.push({ nome:"Fechado ‚Äì Ganho", tipo:"humano", cards:["Conclu√≠do com sucesso"] });
    if(!haveSlugs.has(slug("Fechado ‚Äì Perdido"))) result.push({ nome:"Fechado ‚Äì Perdido", tipo:"humano", cards:["Registrar motivo"] });
    // P√≥s-venda gen√©rico se n√£o houver nenhuma varia√ß√£o
    const posOptions = ["Onboarding/P√≥s-venda","P√≥s-venda","Onboarding","P√≥s-viagem","P√≥s-procedimento","P√≥s-matr√≠cula","Execu√ß√£o/P√≥s","Entrega/Instala√ß√£o","Onboarding/Ativa√ß√£o"]; 
    const hasPos = result.some(s=>posOptions.map(slug).includes(slug(s.nome)));
    if(!hasPos) result.push({ nome:"Onboarding/P√≥s-venda", tipo:"humano", cards:["Kickoff","NPS inicial"] });

    return result;
  }

  function buildPipeline(segmento, usarIA){
    const base = baseTemplateBySegment(segmento, usarIA);
    const override = (usarIA ? pipelinesIAOverrides : pipelinesTradOverrides)[segmento];
    return mergeAndComplete(base, override);
  }

  // Notas customizadas (por coluna e segmento)
  let notasAdicionais = {};

  // Wizard Steps
  const steps = [
    { emoji: "üè¢", title: "Para qual segmento vamos criar seu pipeline?", html: `<div class="options">
      <select id="segmento" required>
        <option value="">Escolha o segmento...</option>
        ${segmentos.map(s=>`<option value="${s.val}">${s.txt}</option>`).join('')}
      </select>
    </div>`, tip: "Escolha o setor mais pr√≥ximo do seu neg√≥cio.", validate: ()=>document.getElementById('segmento').value !== "" },
    { emoji: "ü§ñ", title: "Deseja um funil com IA ou tradicional?", html: `<div class="options">
      <label><input type="radio" name="usarIA" value="sim"><span>Sim, incluir etapas com IA</span></label>
      <label><input type="radio" name="usarIA" value="nao"><span>N√£o, quero um funil tradicional</span></label>
    </div>`, tip: "A IA pode automatizar etapas e trazer mais produtividade!", validate: ()=>!!document.querySelector('input[name="usarIA"]:checked') },
    { emoji: "üíº", title: "Qual √© o principal produto ou servi√ßo que voc√™ oferece?", html: `<div class="options">
      <input type="text" id="produto" placeholder="Descreva seu produto ou servi√ßo principal">
    </div>`, tip: "Ajuda a personalizar seu pipeline.", validate: ()=>document.getElementById('produto').value.trim().length > 0 },
    { emoji: "üë§", title: "Seu cliente normalmente √© pessoa f√≠sica, jur√≠dica ou ambos?", html: `<div class="options">
      <label><input type="radio" name="tipoCliente" value="Pessoa F√≠sica"><span>Pessoa F√≠sica</span></label>
      <label><input type="radio" name="tipoCliente" value="Pessoa Jur√≠dica"><span>Pessoa Jur√≠dica</span></label>
      <label><input type="radio" name="tipoCliente" value="Ambos"><span>Ambos</span></label>
    </div>`, tip: "Para adaptar a comunica√ß√£o do pipeline.", validate: ()=>!!document.querySelector('input[name="tipoCliente"]:checked') },
    { emoji: "üå±", title: "Como voc√™ costuma captar novos leads?", html: `<div class="options">
      <label><input type="checkbox" name="captaLead" value="Indica√ß√£o"> Indica√ß√£o</label>
      <label><input type="checkbox" name="captaLead" value="M√≠dia paga"> M√≠dia paga</label>
      <label><input type="checkbox" name="captaLead" value="Redes sociais"> Redes sociais</label>
      <label><input type="checkbox" name="captaLead" value="Feiras/eventos"> Feiras/eventos</label>
      <label><input type="checkbox" name="captaLead" value="Outro"> Outro</label>
      <input type="text" id="captaOutro" placeholder="Descreva, se outro" style="margin-top:8px;">
    </div>`, tip: "Pode marcar mais de uma op√ß√£o.", validate: ()=>{ let checks = document.querySelectorAll('input[name="captaLead"]:checked'); return checks.length > 0 || document.getElementById('captaOutro').value.trim().length > 0; } },
    { emoji: "ü§î", title: "Qual √© o maior desafio do seu processo comercial hoje?", html: `<div class="options">
      <label><input type="radio" name="desafio" value="Gerar leads"><span>Gerar leads</span></label>
      <label><input type="radio" name="desafio" value="Qualificar leads"><span>Qualificar leads</span></label>
      <label><input type="radio" name="desafio" value="Marcar reuni√µes"><span>Marcar reuni√µes</span></label>
      <label><input type="radio" name="desafio" value="Enviar propostas"><span>Enviar propostas</span></label>
      <label><input type="radio" name="desafio" value="Fechar vendas"><span>Fechar vendas</span></label>
      <label><input type="radio" name="desafio" value="Fazer follow-up"><span>Fazer follow-up</span></label>
      <label><input type="radio" name="desafio" value="Outro"><span>Outro</span></label>
      <input type="text" id="desafioOutro" placeholder="Descreva, se outro" style="margin-top:8px;">
    </div>`, tip: "Escolha o principal desafio atual.", validate: ()=>{ let checked = document.querySelector('input[name="desafio"]:checked'); return checked || document.getElementById('desafioOutro').value.trim().length > 0; } },
    { emoji: "‚è≥", title: "Qual √© o tempo m√©dio do seu ciclo de vendas (do primeiro contato ao fechamento)?", html: `<div class="options">
      <label><input type="radio" name="ciclo" value="1 dia"><span>1 dia</span></label>
      <label><input type="radio" name="ciclo" value="1 semana"><span>1 semana</span></label>
      <label><input type="radio" name="ciclo" value="2-4 semanas"><span>2-4 semanas</span></label>
      <label><input type="radio" name="ciclo" value="1-3 meses"><span>1-3 meses</span></label>
      <label><input type="radio" name="ciclo" value="+3 meses"><span>+3 meses</span></label>
    </div>`, tip: "Ajuda a sugerir o n√∫mero de etapas e automa√ß√µes.", validate: ()=>!!document.querySelector('input[name="ciclo"]:checked') },
    { emoji: "ü§ñ", title: "Voc√™ j√° utiliza mensagens autom√°ticas ou chatbots?", html: `<div class="options">
      <label><input type="radio" name="usaBot" value="Sim"><span>Sim</span></label>
      <label><input type="radio" name="usaBot" value="N√£o"><span>N√£o</span></label>
      <label><input type="radio" name="usaBot" value="Tenho interesse"><span>Tenho interesse</span></label>
    </div>`, tip: "Ajuda a sugerir automa√ß√µes no pipeline.", validate: ()=>!!document.querySelector('input[name="usaBot"]:checked') },
    { emoji: "üìä", title: "Como voc√™ mede o sucesso do seu time de vendas?", html: `<div class="options">
      <label><input type="radio" name="sucesso" value="N√∫mero de vendas"><span>N√∫mero de vendas</span></label>
      <label><input type="radio" name="sucesso" value="Propostas enviadas"><span>Propostas enviadas</span></label>
      <label><input type="radio" name="sucesso" value="Taxa de convers√£o"><span>Taxa de convers√£o</span></label>
      <label><input type="radio" name="sucesso" value="Outro"><span>Outro</span></label>
      <input type="text" id="sucessoOutro" placeholder="Descreva, se outro" style="margin-top:8px;">
    </div>`, tip: "A resposta pode ajudar a definir prioridades e automa√ß√µes.", validate: ()=>{ let checked = document.querySelector('input[name="sucesso"]:checked'); return checked || document.getElementById('sucessoOutro').value.trim().length > 0; } },
    { emoji: "üöÄ", title: "Qual √© o principal objetivo do seu processo de vendas hoje?", html: `<div class="options">
      <input type="text" name="objetivo" id="objetivo" placeholder="Ex: Aumentar volume, reduzir tempo...">
    </div>`, tip: "Defina um objetivo claro. O pipeline te ajuda a chegar l√°!", validate: ()=>document.getElementById('objetivo').value.trim().length > 0 }
  ];

  let currentStep = 0;
  let lastDirection = null;
  const wrapper = document.getElementById('wizardWrapper');
  const centerForm = document.getElementById('centerForm');
  const pipelineArea = document.getElementById('pipelineArea');

  function renderStep(n, direction='next') {
    const step = steps[n];
    let card = wrapper.querySelector('.form-card');
    if(card) {
      card.classList.add(direction === 'next' ? 'slide-out-left' : 'slide-out-right');
      setTimeout(()=>card.remove(), 410);
    }
    let newCard = document.createElement('form');
    newCard.className = 'form-card ' + (direction === 'next' ? 'slide-in-right' : 'slide-in-left');
    newCard.innerHTML = `
      <div class="progress-bar"><div class="progress-bar-inner" id="progress"></div></div>
      <span class="step-emoji">${step.emoji}</span>
      <div class="step-title">${step.title}</div>
      ${step.html}
      <div class="step-tip">${step.tip}</div>
      <div class="form-btn-row">
        ${n > 0 ? `<button type="button" class="prev-btn">Voltar</button>` : ""}
        <button type="button" class="next-btn" id="nextBtn" disabled>${n < steps.length-1 ? "Pr√≥xima" : "Finalizar"}</button>
      </div>
    `;
    wrapper.appendChild(newCard);

    newCard.querySelector('#progress').style.width = (n/(steps.length-1)*100) + '%';

    // Habilita Pr√≥xima se validar
    const enableNext = ()=>{ newCard.querySelector('.next-btn').disabled = !step.validate(); };
    newCard.querySelectorAll('select, input[type="radio"], input[type="text"]').forEach(el=>{
      el.addEventListener('input', enableNext);
      el.addEventListener('change', enableNext);
    });
    // checa uma vez ao montar
    enableNext();

    if(newCard.querySelector('.prev-btn')) {
      newCard.querySelector('.prev-btn').onclick = ()=>{
        lastDirection = 'prev';
        currentStep--;
        renderStep(currentStep, 'prev');
      }
    }

    newCard.querySelector('.next-btn').onclick = ()=>{
      if(step.validate()) {
        // Salva resposta do passo atual
        switch(currentStep) {
          case 0: userAnswers.segmento = document.getElementById('segmento').value; break;
          case 1: userAnswers.usarIA = document.querySelector('input[name="usarIA"]:checked')?.value; break;
          case 2: userAnswers.produto = document.getElementById('produto').value.trim(); break;
          case 3: userAnswers.tipoCliente = document.querySelector('input[name="tipoCliente"]:checked')?.value; break;
          case 4:
            userAnswers.captaLead = Array.from(document.querySelectorAll('input[name="captaLead"]:checked')).map(el=>el.value);
            userAnswers.captaOutro = document.getElementById('captaOutro').value.trim();
            break;
          case 5:
            let desafioEl = document.querySelector('input[name="desafio"]:checked');
            userAnswers.desafio = desafioEl ? desafioEl.value : "";
            userAnswers.desafioOutro = document.getElementById('desafioOutro').value.trim();
            break;
          case 6: userAnswers.ciclo = document.querySelector('input[name="ciclo"]:checked')?.value; break;
          case 7: userAnswers.usaBot = document.querySelector('input[name="usaBot"]:checked')?.value; break;
          case 8:
            let sucessoEl = document.querySelector('input[name="sucesso"]:checked');
            userAnswers.sucesso = sucessoEl ? sucessoEl.value : "";
            userAnswers.sucessoOutro = document.getElementById('sucessoOutro').value.trim();
            break;
          case 9: userAnswers.objetivo = document.getElementById('objetivo').value.trim(); break;
        }

        if(currentStep < steps.length-1) {
          lastDirection = 'next';
          currentStep++;
          renderStep(currentStep, 'next');
        } else {
          mostrarPipelineFinal();
        }
      }
    };
  }

  renderStep(0, 'next');

  // ======== Mostrar Pipeline (completo) ========
  function mostrarPipelineFinal() {
    centerForm.style.display = "none";
    pipelineArea.style.display = "block";
    pipelineArea.innerHTML = ""; // limpar

    const segmento = userAnswers.segmento;
    const usarIA = userAnswers.usarIA === "sim";
    const objetivo = userAnswers.objetivo;

    // Constr√≥i pipeline completo (com base + overrides + garantia de etapas finais)
    let pipeline = buildPipeline(segmento, usarIA);
    if(!pipeline || pipeline.length === 0){
      pipeline = baseTemplateDefault(usarIA);
    }

    // Wrapper do pipeline
    const pipelineWrap = document.createElement('div');
    pipelineWrap.className = 'pipeline-wrapper';
    pipelineWrap.id = "pipelineContent";

    // Resumo
    let capta = '-';
    if (userAnswers.captaLead && userAnswers.captaLead.length > 0) {
      capta = userAnswers.captaLead.filter(item => item !== 'Outro').join(', ');
      if (userAnswers.captaLead.includes('Outro') && userAnswers.captaOutro) {
        capta = capta ? `${capta}, ${userAnswers.captaOutro}` : userAnswers.captaOutro;
      }
    } else if (userAnswers.captaOutro) { capta = userAnswers.captaOutro; }

    let desafio = '-';
    if (userAnswers.desafio) {
      desafio = userAnswers.desafio === 'Outro' ? (userAnswers.desafioOutro || 'Outro') : userAnswers.desafio;
    }

    let sucesso = '-';
    if (userAnswers.sucesso) {
      sucesso = userAnswers.sucesso === 'Outro' ? (userAnswers.sucessoOutro || 'Outro') : userAnswers.sucesso;
    }

    let tipoCliente = userAnswers.tipoCliente || '-';
    let ciclo = userAnswers.ciclo || '-';

    let resumo = `
      <div style="background:#f3f7fa;padding:18px 24px 8px 24px;border-radius:18px;margin-bottom:18px;">
        <h3 style="color:#234366;margin:0 0 12px 0;font-size:1.1rem;">Resumo das Suas Respostas:</h3>
        <ul style="list-style:none;padding:0;line-height:1.7;">
          <li><b>Segmento:</b> ${segmentos.find(s=>s.val===userAnswers.segmento)?.txt || '-'}</li>
          <li><b>Funil:</b> ${usarIA ? "Com IA" : "Tradicional"}</li>
          <li><b>Produto/Servi√ßo:</b> ${userAnswers.produto || '-'}</li>
          <li><b>Tipo de Cliente:</b> ${tipoCliente}</li>
          <li><b>Como voc√™ capta leads hoje:</b> ${capta}</li>
          <li><b>Desafio atual:</b> ${desafio}</li>
          <li><b>Ciclo de vendas:</b> ${ciclo}</li>
          <li><b>Usa automa√ß√£o/chatbot?</b> ${userAnswers.usaBot || '-'}</li>
          <li><b>O que seria sucesso pra voc√™?</b> ${sucesso}</li>
          <li><b>Objetivo principal:</b> ${userAnswers.objetivo||'-'}</li>
        </ul>
      </div>
    `;

    pipelineWrap.innerHTML = resumo + `<div class="pipeline-objetivo"><b>Objetivo principal:</b> ${objetivo}</div>`;

    // Kanban board
    const board = document.createElement('div');
    board.className = 'pipeline-board';

    pipeline.forEach((col, idx) => {
      const key = segmento + "_" + idx + "_" + (usarIA ? "ia" : "trad");
      const userNotes = (notasAdicionais[key] || []).map((note, nidx) =>
        `<div class="kanban-card usernote">
          <span class="card-label">Nota</span>
          ${note}
          <button class="card-delete del-note-btn" title="Excluir nota" data-key="${key}" data-idx="${nidx}">&times;</button>
        </div>`
      ).join('');

      let cardsHtml = (col.cards||[]).map(c =>
        `<div class="kanban-card ${col.tipo}">
          <span class="card-label">${col.tipo === "ia" ? "IA" : "Humano"}</span>${c}
        </div>`
      ).join('') + userNotes;

      board.innerHTML += `
        <div class="pipeline-col col-${col.tipo}" style="border-top-color:${col.tipo === "ia" ? "#32c4b0" : "#7085f5"};">
          <div class="col-title">${col.tipo === "ia" ? icons.ia : icons.humano} ${col.nome}</div>
          <div class="kanban-cards" id="cardsCol${idx}">${cardsHtml}</div>
          <div class="add-note-btn kanban-add-btn" title="Adicionar nota" data-key="${key}" data-idx="${idx}">+</div>
          <div class="add-note-form" id="form_${key}" style="display:none;">
            <textarea id="note_${key}" rows="2" placeholder="Digite uma nota para esta etapa..."></textarea><br>
            <button onclick="addNote('${key}');return false;">Adicionar</button>
          </div>
        </div>
      `;
    });

    pipelineWrap.appendChild(board);

    // A√ß√µes: PDF e Refazer
    const actions = document.createElement('div');
    actions.className = "pipeline-actions";
    actions.innerHTML = `
      <button class="pdf-btn" id="pdfBtn">Gerar PDF</button>
      <button class="restart-btn" id="restartBtn">Refazer Pipeline</button>
    `;
    pipelineWrap.appendChild(actions);

    pipelineArea.appendChild(pipelineWrap);

    document.getElementById('restartBtn').onclick = ()=>{
      pipelineArea.style.display = "none";
      centerForm.style.display = "flex";
      currentStep = 0;
      renderStep(0,'next');
    };

    document.getElementById('pdfBtn').onclick = function() {
      document.querySelector('.pipeline-actions').style.display = 'none';
      window.print();
      setTimeout(() => { document.querySelector('.pipeline-actions').style.display = ''; }, 500);
    };

    document.querySelectorAll('.add-note-btn').forEach(btn => {
      btn.onclick = function() {
        let key = this.getAttribute('data-key');
        document.querySelectorAll('.add-note-form').forEach(f => f.style.display = 'none');
        document.getElementById('form_' + key).style.display = 'block';
        document.getElementById('note_' + key).focus();
      }
    });
  }

  // Adicionar nota personalizada
  window.addNote = function(key) {
    const textarea = document.getElementById('note_' + key);
    let nota = textarea.value.trim();
    if (!nota) return;
    if (!notasAdicionais[key]) notasAdicionais[key] = [];
    notasAdicionais[key].push(nota);
    textarea.value = '';
    document.getElementById('form_' + key).style.display = 'none';
    mostrarPipelineFinal();
  }

  // Apagar nota personalizada
  document.addEventListener('click', function(e){
    if (e.target.classList.contains('del-note-btn')) {
      let key = e.target.getAttribute('data-key');
      let idx = parseInt(e.target.getAttribute('data-idx'));
      if (notasAdicionais[key]) {
        notasAdicionais[key].splice(idx,1);
        mostrarPipelineFinal();
      }
    }
  });
</script>
</body>
</html>
